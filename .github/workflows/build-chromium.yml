name: Enhanced Build Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      verify_protections:
        description: 'Verify protection mechanisms'
        required: false
        type: boolean
        default: false

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Security Analysis
      run: |
        ./devutils/security_scanner.py
        ./devutils/dependency_audit.py
        
  performance-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Performance Baseline
      run: |
        ./devutils/performance_test.py --baseline
        ./devutils/memory_profile.py

  build:
    needs: [security-scan, performance-check]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.1'
        
    - name: Install Dependencies
      run: |
        python -m pip install -r .cirrus_requirements.txt
        # Optional: Install playwright only if protection verification is enabled
        if [ "${{ inputs.verify_protections }}" == "true" ]; then
          python -m pip install playwright
          playwright install chromium
        fi
        
    - name: Cache Build
      uses: actions/cache@v3
      with:
        path: |
          chromium_src
          chromium_download_cache
          build/src/out
        key: ${{ runner.os }}-chromium-${{ hashFiles('chromium_version.txt') }}
        
    - name: Clone Chromium
      run: |
        # These directories should not exist when this is called
        rm -rf chromium_src
        rm -rf chromium_download_cache
        mkdir chromium_download_cache
        # Attempt to clone directly since we need patches
        ./utils/clone.py -o chromium_src
        
    - name: Apply Patches
      run: |
        # Remove staging directory if exists
        rm -rf chromium_src/uc_staging
        # Apply all patches
        ./utils/patches.py apply chromium_src patches
        
    - name: Domain Substitution
      run: |
        ./utils/domain_substitution.py apply -r domain_regex.list -f domain_substitution.list -c build/domsubcache.tar.gz chromium_src
        
    - name: Build Configuration
      run: |
        # Copy build flags
        cp flags.gn chromium_src/out/Default/args.gn
        cd chromium_src
        gn gen out/Default
        
    - name: Verify Protection Features
      run: |
        python3 build/validate_build_config.py --verify-all
        python3 devutils/validate_updates.py --check-all-components
        python3 protection_system/verify_integrity.py --full-check
        
    - name: Build Chromium
      run: |
        cd chromium_src
        # Enable all protection features
        gn gen out/Default --args='is_debug=false is_official_build=true enable_nacl=false enable_widevine=false'
        # Build with all components
        ninja -C out/Default chrome
        
    - name: Verify Build Output
      run: |
        python3 devutils/verify_build_output.py --check-all-features
        python3 protection_system/verify_build_integrity.py
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ungoogled-chromium-${{ runner.os }}
        path: |
          chromium_src/out/Default/chrome
          chromium_src/out/Default/*.pak
          chromium_src/out/Default/*.bin
          chromium_src/out/Default/locales
