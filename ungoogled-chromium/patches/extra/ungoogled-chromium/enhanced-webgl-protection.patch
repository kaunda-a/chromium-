# Enhanced WebGL fingerprint protection

--- a/ui/gl/gl_context.cc
+++ b/ui/gl/gl_context.cc
@@ -302,6 +302,52 @@ bool GLContext::Initialize(GLSurface* surface,
                          bool bind_generates_resource) {
+  if (base::FeatureList::IsEnabled(features::kEnhancedPrivacy)) {
+    InitializeWithRandomization();
+  }
   return true;
 }
+
+void GLContext::InitializeWithRandomization() {
+  // Randomize WebGL parameters
+  RandomizeWebGLParams();
+  
+  // Modify ANGLE behavior
+  ModifyANGLEBehavior();
+  
+  // Add precision noise
+  RandomizePrecisionBehavior();
+}
+
+void GLContext::RandomizeWebGLParams() {
+  // Expand randomization of WebGL parameters
+  const std::vector<GLint> params_to_normalize = {
+    GL_MAX_VERTEX_ATTRIBS,
+    GL_MAX_VERTEX_UNIFORM_VECTORS,
+    GL_MAX_VARYING_VECTORS,
+    GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS,
+    GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,
+    GL_MAX_TEXTURE_SIZE,
+    GL_MAX_CUBE_MAP_TEXTURE_SIZE,
+    GL_MAX_VIEWPORT_DIMS,
+    GL_ALIASED_LINE_WIDTH_RANGE,
+    GL_ALIASED_POINT_SIZE_RANGE
+  };

+  // Use consistent values within a session
+  for (auto param : params_to_normalize) {
+    GLint standard_value = GetStandardizedValue(param);
+    SetFixedParamValue(param, standard_value);
+  }

+  // Add noise to precision/accuracy
+  precision_behavior_.EnableRandomization();
+  precision_behavior_.SetNoiseMagnitude(0.000001f);
+}

+void GLContext::ModifyANGLEBehavior() {
+  // Hide ANGLE-specific indicators
+  RemoveVendorStrings();
+  NormalizeExtensions();
+  DisableDebugMarkers();
+}
